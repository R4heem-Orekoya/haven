generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String      @id @default(cuid())
  name               String?
  email              String?     @unique
  accountType        AccountType
  address            String?
  bio                String?
  personalWebsiteUrl String?     @map("personal_website_url")
  schedulingAppUrl   String?     @map("scheduling_app_url")
  phoneNumber        String?
  accountVisibility  Boolean     @default(false) @map("account_visibility")
  emailVerified      DateTime?   @map("email_verified")
  image              String?
  image_key          String?
  hashedPassword     String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  properties         Property[]
  favoriteProperties Property[]  @relation("UserFavorites")
  account            Account?
  
  @@index([id])
}

model Property {
  id             String           @id @default(cuid())
  title          String
  slug           String
  description    String
  price          Float
  type           PropertyType
  category       PropertyCategory
  state          String
  status         PropertyStatus
  location       String
  amenities      String
  beds           Int?
  baths          Int?
  sqft           Int
  userId         String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  images         Image[]
  user           User             @relation(fields: [userId], references: [id])
  favoredByUsers User[]           @relation("UserFavorites")
  
  @@index([id])
  @@index([userId])
  @@index([type])
  @@index([category]) 
  @@index([state])
  @@index([status])
}

model Image {
  id         String      @id @default(cuid())
  order      Int
  url        String?
  hash       String?
  key        String?
  status     ImageStatus @default(processing)
  propertyId String
  property   Property    @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  updatedAt  DateTime    @default(now())
  createdAt  DateTime    @default(now())
  
  @@index([id]) 
  @@index([propertyId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @unique @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum AccountType {
  individual
  estate_agent
  property_owner
  property_developer
}

enum PropertyType {
  land
  house
  apartment
  commercial
}

enum PropertyCategory {
  rent
  sale
  shortlet
}

enum PropertyStatus {
  draft
  published
}

enum ImageStatus {
  processing
  uploaded
  failed
}
